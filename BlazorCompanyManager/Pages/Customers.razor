@page "/customers"
@inherits CustomersBase
@inject IJSRuntime JS
@using ClosedXML.Excel
@using System.IO

<h1>Customers</h1>
<br />
<button class="btn btn-primary" @onclick="ShowDialog">Add customer</button>
<button class="btn btn-primary" type="button" @onclick="@(() => DownloadFile())">Download</button>
<br />
<br />
@if (showPopup)
{
  <div class="modal" tabindex="-1" style="display: block; background-color: rgba(176, 176, 176, 0.4); "
     @onmousemove="OnMouseMove">
    <div class="modal-dialog">
      <div class="modal-content shadow-lg p-3 mb-5 bg-white rounded"
         style="position:absolute; top: @(offsetY)px; left: @(offsetX)px;cursor:@cursor;">
        <div class="modal-header" @onmouseup="OnMouseUp" @onmousedown="OnMouseDown" @onmouseover="@OnMouseOver" @onmouseout="@OnMouseOut">
          <h5 class="modal-title">Add new customer</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseDialog">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <EditForm Model="customers" OnValidSubmit="SubmitForm">
          <div class="modal-body">
            <form>
              <div class="mb-3">
                <label for="customer-company-name" class="col-form-label">Company name:</label>
                <input type="text" class="form-control" placeholder="Enter company name.." @bind="customer.CompanyName" />
              </div>
              <div class="mb-3">
                <label for="customer-city" class="col-form-label">City:</label>
                <input type="text" class="form-control" placeholder="Enter city." @bind="customer.City" />
              </div>
              <div class="mb-3">
                <label for="customer-address" class="col-form-label">Address:</label>
                <input type="text" class="form-control" placeholder="Enter address.." @bind="customer.Address" />
              </div>
              <div class="mb-3">
                <label for="customer-post-code" class="col-form-label">Post code:</label>
                <input type="text" class="form-control" placeholder="Enter post code.." @bind="customer.PostCode" />
              </div>
              <div class="mb-3">
                <label for="customer-phone-number" class="col-form-label">Phone number:</label>
                <input type="text" class="form-control" placeholder="Enter phone number.." @bind="customer.PhoneNumber" />
              </div>
              <div class="mb-3">
                <label for="customer-business-id" class="col-form-label">Business ID:</label>
                <input type="text" class="form-control" placeholder="Enter business id.." @bind="customer.BusinessID" />
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseDialog">Cancel</button>
            <button type="submit" class="btn btn-primary" @onclick="CloseDialog">Save changes</button>
          </div>
        </EditForm>
      </div>
    </div>
  </div>
}
@if (!customers.Any() && !isLoaded)
{
  <div class="spinner"></div>
}
else if (!customers.Any())
{
  <table class="table">
    <thead>
      <tr>
        <td>Company name</td>
        <td>City</td>
        <td>Address</td>
        <td>Post code</td>
        <td>Phone number</td>
        <td>Business ID</td>
        <td>Edit</td>
        <td>Delete</td>
      </tr>
    </thead>
    <tbody>
    </tbody>
  </table>
  <br />
  <br />
  <div class="alert">
    <span class="closebtn" onclick="this.parentElement.style.display='none';">&times;</span>
    Customer database has no records yet!
  </div>
}
else
{
  <table class="table">
    <thead>
      <tr>
        <td>Company name</td>
        <td>City</td>
        <td>Address</td>
        <td>Post code</td>
        <td>Phone number</td>
        <td>Business ID</td>
        <td>Edit</td>
        <td>Delete</td>
      </tr>
    </thead>
    <tbody>
      @foreach (var customer in customers)
      {
        <tr>
          <td>@customer.CompanyName</td>
          <td>@customer.City</td>
          <td>@customer.Address</td>
          <td>@customer.PostCode</td>
          <td>@customer.PhoneNumber</td>
          <td>@customer.BusinessID</td>
          <td><button class="btn btn-info" @onclick="@(e => EditRecord(customer.Id))">Edit</button></td>
          <td><button class="btn btn-danger" @onclick="@(e => OnDelete(customer.Id))">Delete</button></td>
        </tr>
      }
    </tbody>
  </table>
}

@functions {
  private async Task DownloadFile()
  {
    using (var workbook = new XLWorkbook())
    {
      IXLWorksheet worksheet =
      workbook.Worksheets.Add("Customers");
      worksheet.Cell(1, 1).Value = "Company name";
      worksheet.Cell(1, 2).Value = "City";
      worksheet.Cell(1, 3).Value = "Address";
      worksheet.Cell(1, 4).Value = "Post code";
      worksheet.Cell(1, 5).Value = "Phone number";
      worksheet.Cell(1, 6).Value = "Business ID";

      for (int i = 1; i <= 6; i++)
      {
        worksheet.Cell(1, i).Style.Font.Bold = true;
      }

      int index = 1;
      foreach (var customer in this.customers)
      {
        worksheet.Cell(index + 1, 1).Value = customer.CompanyName;
        worksheet.Cell(index + 1, 2).Value = customer.City;
        worksheet.Cell(index + 1, 3).Value = customer.Address;
        worksheet.Cell(index + 1, 4).Value = customer.PostCode;
        worksheet.Cell(index + 1, 5).Value = customer.PhoneNumber;
        worksheet.Cell(index + 1, 6).Value = customer.BusinessID;

        index++;
      }

      worksheet.Columns().AdjustToContents();  // Adjust column width
      worksheet.Rows().AdjustToContents();

      var firstCell = worksheet.FirstCellUsed();
      var lastCell = worksheet.LastCellUsed();
      var range = worksheet.Range(firstCell.Address, lastCell.Address);

      var table = range.CreateTable();

      using (var stream = new MemoryStream())
      {
        workbook.SaveAs(stream);
        var content = stream.ToArray();

        var fileName = "Customers.xlsx";
        await JS.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(content));
      }
    }
  }
}